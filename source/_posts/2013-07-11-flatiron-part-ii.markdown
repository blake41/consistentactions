---
layout: post
title: "Flatiron Part II"
date: 2013-07-11 16:17
published: false
comments: true
categories: "Flatiron II" 
---

My colleague [Jeff Baird](learnwithjeff.com) and I have been talking a lot about how to become a better programer.  Both of us had similar beginnings, teaching ourselves rails/web development by ourselves, and we both have ended up at the same place.  He wrote a great [blog post](http://learnwithjeff.com/blog/2013/07/11/moving-beyond-advanced-beginner/) about becoming an advanced beginner which spurred this blog post. <!--more-->
The tech community has the nice problem that it is eating itself from the inside.  We have "too many" startups and not enough programmers.  More importantly we don't have enough "good" or "senior" programmers to guide us n00b's along to where we need/want to be.  More and more people are joining "boot camps" with the goal of either becoming programmers themselves or at least being able to understand the worlds dominant form of communication, the internet.  For those of us lucky enough to be programmers at the best time in history to practice this craft we benefit from the tremendous demand and lack of supply for our services.  However the dearth of experienced programmers is a double edged sword.  The best startups can hire the best people, Google, Amazon and Microsoft are the giant sucking sound at the top of the programmer recruiting funnel.  After those who can afford to pay the most and have the brand recognition get their fill, the rest of the tech ecosystem gets to market themselves and take what they can get.  What ends up happening is that the rich get richer, good programmers want to work with good programmers, so strong teams get stronger and weak teams have a harder and harder time trying to convince people to join their cause.  So what's a non-brand name startup to do?  You have to hire more junior folks who are hungry.  This is an amazing opportunity for many folks with a short programming resume to get a shot to get paid to do what they love and grow into the great programmer they know they can be.  

How do programmers get better?  I'm not sure that many people I've met really think about this?  Despite the fact that it's been scientifically demonstrated that deliberate practice is the only way to mastery, most of us just go with the flow.  We assume that if we go to work every day and program, we must be getting better.  There's a lot of research that shows that many programmers aren't improving codebases at all, and at worst might even be a net negative due to the dramatic cost of bust introduced into any system.  On top of that, without strong leadership/mentorship, who is to say the patterns you're learning are actually good ones?  Is what you're practicing actually stuff that it's worth practicing?  Are you just learning bad habits?  With a market flooded by junior programmers, inevitably the vast majority of startups are going to be heavy with junior programmers without enough senior wisdom to help them grow in the right direction.

Over a series of blog posts I'd like to see if it's possible to outline a framework for how someone might go about getting better despite the hurdles I've set forth above.